@mixin transition($properties: all, $duration: .3s, $easing: ease-out) {
	@if length($properties) > 1 {
		transition-property: $properties;
		transition-duration: $duration;
		transition-timing-function: $easing;
	} @else {
		transition: $properties $duration $easing;
	}
}

@mixin keyframe ($animation_name) {
    @-webkit-keyframes $animation_name {
        @content;
    }

    @-moz-keyframes $animation_name {
        @content;
    }

    @-o-keyframes $animation_name {
        @content;
    }

    @keyframes $animation_name {
        @content;
    }
}

/*
    Example usage: 
    @include animation(10s, 5s, changecolour)
 */
@mixin animation ($delay, $duration, $animation, $count, $timeFunction) {
    -webkit-animation-delay: $delay;
    -webkit-animation-duration: $duration;
    -webkit-animation-name: $animation;
    -webkit-animation-fill-mode: forwards; /* this prevents the animation from restarting! */
    -webkit-animation-timing-function: $timeFunction;
    -webkit-animation-iteration-count: $count;

    -moz-animation-delay: $delay;
    -moz-animation-duration: $duration;
    -moz-animation-name: $animation;
    -moz-animation-fill-mode: forwards; /* this prevents the animation from restarting! */
    -moz-animation-timing-function: $timeFunction;
    -moz-animation-iteration-count: $count;

    -o-animation-delay: $delay;
    -o-animation-duration: $duration;
    -o-animation-name: $animation;
    -o-animation-fill-mode: forwards; /* this prevents the animation from restarting! */
    -o-animation-timing-function: $timeFunction;
    -o-animation-iteration-count: $count;

    animation-delay: $delay;
    animation-duration: $duration;
    animation-name: $animation;
    animation-fill-mode: forwards; /* this prevents the animation from restarting! */
    animation-timing-function: $timeFunction;
    animation-iteration-count: $count;
}

/* TRANSFORM  */
@mixin transform($params) {
    -webkit-transform: $params;
    -moz-transform:    $params;
    transform:         $params;
}
